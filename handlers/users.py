from aiogram import types, F, Router
from aiogram.types import Message
from aiogram.filters import Command
import kb,tabulate, database.request as rq
from datetime import datetime, timedelta
from aiogram.fsm.context import FSMContext 
from states import Users
from config import *
router=Router()


days=["–ü–ù","–í–¢","–°–†","–ß–¢","–ü–¢","–°–ë","–í–°"]

@router.message(Command('info'))
@router.message(F.text=="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚ÑπÔ∏è")   
async def massage_info(msg:Message):
    await msg.answer("""
–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:
    –ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ –≤–≤–µ–¥–∏—Ç–µ /prices
    –ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤–≤–µ–¥–∏—Ç–µ /time
    –î–ª—è –∑–∞–ø–∏—Å–∏ –≤–≤–µ–¥–∏—Ç–µ /write (–¥–∞—Ç–∞) (–≤—Ä–µ–º—è)   
    –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ /info –∏–ª–∏ /start               
""",reply_markup=kb.kb_buttons["msg_start"])
    await msg.answer_contact(PHONE,NAME,reply_markup=kb.kb_buttons["info"])
     

@router.message(Command('prices'))
@router.message(F.text=="–°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ üßæ")
async def massage_price(msg:Message):
    global data
    data=[[i, s.NameServices, f"{s.price} {BANKNOTE[1]}" ] for i, s in enumerate(await rq.return_serveces(), start=1)]
    await msg.answer(f"""
            –î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å–ª—É–≥–∏:
{tabulate.tabulate(data, headers=["No","–£—Å–ª—É–≥–∞","–¶–µ–Ω–∞"])}
        """,reply_markup=kb.kb_buttons["prices"])   
 
@router.message(F.text=="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è üìù",)
async def message_time(msg:Message,state:FSMContext):
    global data
    state.clear()
    days=await rq.return_days()
    if days:
        data=[[i, d.day, d.start_time,d.finish_time] for i, d in enumerate(days, start=1)]
        btns=kb.InlineKeyboardMarkup(inline_keyboard=[[kb.InlineKeyboardButton(text=f'{day:%d-%m-%Y} —Å {start} –¥–æ {finish}' , callback_data=f'user write {day:%d-%m-%Y}') ]for _,day,start,finish in data])
        state.set_state(Users.choice_day)
        await msg.answer(f"""
{tabulate.tabulate(data, headers=["No", "–î–µ–Ω—å", "–ù–∞—á–∞–ª–æ –ø—Ä–∏–µ–º–∞", "–ö–æ–Ω–µ—Ü –ø—Ä–∏–µ–º–∞"])}
–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–Ω—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.
–î–ª—è –æ–±–Ω—É–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–Ω–æ–≤–æ –Ω–∞–∂–º–∏—Ç–µ "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è"
                        """, reply_markup=btns)
    else:
        await msg.answer("–î–Ω–µ–π –ø—Ä–∏–µ–º–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–æ!")
        await msg.answer_sticker(r'CAACAgIAAxkBAAED3RRl5ExArZDqkMwg2n4xYiLqTLO36wAC1AwAAmSX0Unr2bjSVr0jRTQE')

@router.callback_query(F.data.regexp(r"user write \d{2}-\d{2}-\d{4}$"))
async def write_callback(call:types.CallbackQuery, state:FSMContext):
    global days
    date=call.data.split()[-1]
    date=datetime.strptime(date, "%d-%m-%Y").date()
    day=await rq.return_day(date)
    print("\n"*5,await state.get_state(),"\n"*5)
    if day:
        day=day[-1]
        a=await rq.return_write(day.id)
        a_time=[write.visit_time for write in a]
        start= day.start_time
        data=[]
        while start<day.finish_time:
            if start not in a_time:
                data.append((f"{day.day:%d/%m/%Y}({days[datetime.weekday(day.day)]})\t:\t{start:%H:%M}",f"user time {day.day:%d-%m-%Y} {start:%H:%M}"))
            start=(datetime.strptime(f"{start:%H:%M}","%H:%M")+timedelta(minutes=30)).time()
        state.update_data(choice_day=date)
        state.set_state(Users.choice_time)
        await call.message.answer(f"""
            –í—ã–±—Ä–∞–Ω–æ: {date:%d-%m-%Y} ({days[datetime.weekday(date)]})
            –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á–∞—Å:–º–∏–Ω—É—Ç–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è

""",reply_markup=kb.return_kb(data))   

@router.callback_query(F.data.regexp(r"user time \d{2}-\d{2}-\d{4} [01]\d|2[0-3]:[0-5]\d$"))
async def write_callback(call:types.CallbackQuery,state:FSMContext):
    day,time=call.data.split()[-2:]
    day=await rq.return_day(datetime.strptime(day, "%d-%m-%Y").date())
    if day:
        day=day[-1]
        btns=[(f"{s.id}) {s.NameServices}:\n{s.price} {BANKNOTE[1]}",f"user write {day.day:%d-%m-%Y} {time} id{s.id} ") for s in await rq.return_serveces()]
        btns=kb.return_kb(btns)
        time=datetime.strptime(time, "%H:%M").time()
        state.update_data(choice_time=time)
        state.set_state(Users.choice_service)
        await call.message.answer(f"""–í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ {day.day:%d-%m-%Y} –≤ {time:%H:%M}
–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:""",reply_markup=btns)
        
@router.callback_query(F.data.regexp(r"user write \d{2}-\d{2}-\d{4} [01]\d|2[0-3]:[0-5]\d id\d $"))
async def write_callback(call:types.CallbackQuery,state:FSMContext):
    day,time,id_service=call.data.split()[-3:]
    day=datetime.strptime(day, "%d-%m-%Y").date()
    time=datetime.strptime(time, "%H:%M").time()  
    id_service=int(id_service[2:])  
    day=await rq.return_day(day)
    if day:
        day=day[-1]
        state.update_data(choice_service=id_service) 
        await  rq.add("appointments",[(day.id,call.message.from_user.id,time,(datetime.strptime(f"{time:%H:%M}","%H:%M")+timedelta(minutes=30+(time.minute%30))).time(),id_service)])
        state.clear()
        service=await rq.return_serveces(id=id_service)[-1]
        await call.message.answer(f"""–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ {day.day:%d-%m-%Y} –≤ {time:%H:%M} –Ω–∞ —É—Å–ª—É–≥—É:{service.NameServices}
–°—Ç–æ–π–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏:{service.price}""")

@router.message(F.text.regexp(r"\d{2}:\d{2}$"))
async def write_time(msg:Message):
    global last_command
    if last_command[msg.from_user.id]=="time":
        date=datetime.strptime(msg.text,"%H:%M").time()
        day=await rq.return_day(datetime.strptime(msg.text,"%H:%M"))